datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Blog                  Blog[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Trek {
  id                   String     @id @default(cuid())
  name                 String
  state                String
  location             String
  duration             String
  description          String
  altitude             String
  bestTime             String
  pickupPoint          String
  difficultyLevel      String
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @default(now())
  defaultSlots         Int
  defaultBookingAmount Int
  defaultTotalAmount   Int
  Blog                 Blog?      @relation(fields: [blogId], references: [id])
  blogId               String?
  BlogTrek             BlogTrek[]
  trekImages           String[]
}

model Blog {
  id        String     @id @default(cuid())
  name      String
  content   Json?
  html      String?
  markdown  String?
  images    String[]
  author    User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  treks     Trek[]
  BlogTrek  BlogTrek[]
  userId    String
  faqs      faqs[]
}

model faqs {
  id         String  @id @default(cuid())
  question   String
  answer     String
  blogId     String
  visibility Boolean @default(true)
  Blog       Blog    @relation(fields: [blogId], references: [id])

  @@index([blogId])
}

model BlogTrek {
  blogId String
  trekId String

  blog Blog @relation(fields: [blogId], references: [id])
  trek Trek @relation(fields: [trekId], references: [id])

  @@id([blogId, trekId])
}

model SeoMetadata {
  id            String   @id @default(cuid())
  url           String   @unique
  title         String
  description   String
  h1            String
  canonical     String
  ogUrl         String
  ogTitle       String
  ogDescription String
  ogImage       String
  schema        String
  metaRobots    String
  altTag        String
  schemaReview  String
  keywords      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@index([url])
}
